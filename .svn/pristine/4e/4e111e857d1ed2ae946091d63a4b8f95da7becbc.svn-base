(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/script/monster/boss.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, 'a4ffcZ7QPBEHZF88V5npeAl', 'boss', __filename);
// script/monster/boss.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html

var Actor = require("actor");
var FSM = require("FSM");

var _require = require("bossState"),
    Walk = _require.Walk,
    Fire = _require.Fire,
    TopTurn = _require.TopTurn,
    Die = _require.Die;

cc.Class({
    extends: Actor,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
    },
    init: function init() {
        this.node.zIndex = 100;
        this.life = 10;
        this.orignPos = this.node.position;
        this.dir = DIR.DIR_LEFT;
        //是否允许使用斧子
        this.aex = arguments[1];
        this.fsm = new FSM();
        this.animation = this.node.getComponent(cc.Animation);
        this.fsm.addState(new Walk(this, "walk"));
        this.fsm.addState(new Fire(this, "fire"));
        this.fsm.addState(new TopTurn(this, "updown"));
        this.fsm.addState(new Die(this, "die"));
        this.fsm.setDefaultState("walk");
        //boss来回运动
        var moveLeft = cc.moveBy(10, cc.v2(-360, 0));
        this.node.runAction(cc.repeatForever(cc.sequence(moveLeft, moveLeft.reverse())));

        this.schedule(this.jump, 4);

        this.schedule(this.fire, 3);
    },
    jump: function jump() {
        this.vCurrSpeed = 400;
        this.vCurrAcceleration = -800;
    },
    fire: function fire() {
        this.fsm.switchStateWithStack("fire");
    },
    getSize: function getSize() {
        var size = this.node.getContentSize();
        return cc.rect(this.node.x, this.node.y, size.width, size.height);
    },
    getFirePos: function getFirePos() {
        switch (this.dir) {
            case DIR.DIR_LEFT:
                return cc.v2(this.node.x - 20, this.node.y + 40);
            case DIR.DIR_RIGHT:
                return cc.v2(this.node.x + 20, this.node.y + 40);
        }
    },
    getDesFireY: function getDesFireY() {
        return this.orignPos.y + Math.floor(Math.random() * 4) * 40;
    },
    turnLeft: function turnLeft() {
        this.node.scaleX = 1;
        this.dir = DIR.DIR_LEFT;
    },
    turnRight: function turnRight() {
        this.node.scaleX = -1;
        this.dir = DIR.DIR_RIGHT;
    },
    onCollsiWithPBullet: function onCollsiWithPBullet(bullet) {
        bullet.die();
        if (this.life-- <= 0) {
            this.fsm.switchState("updown");
        }
    },
    interactive: function interactive(actor) {
        if (actor.isDie || this.isDie) return;
        var sizeOne = actor.getSize();
        var sizeTwo = this.getSize();

        if (sizeOne.x > sizeTwo.x && this.dir === DIR.DIR_LEFT) {
            this.turnRight();
        } else if (sizeOne.x < sizeTwo.x && this.dir === DIR.DIR_RIGHT) {
            this.turnLeft();
        }

        if (this.actorCollsition(sizeOne, sizeTwo)) {
            //闪烁状态碰到怪物
            if (!actor.isFlashing && !actor.isInvincible) {
                if (actor.getFormState() !== FORM_STATE.SMALL) {
                    actor.fsm.switchStateWithStack("to_small");
                } else {
                    actor.fsm.switchState("die");
                }
            }
        }
    },

    // LIFE-CYCLE CALLBACKS:

    // onLoad () {}

    update: function update(dt) {
        if (this.isPause) return;

        if (this.enableMove) {
            this.move(dt);
        }

        var tile = null;

        //脚底的碰撞检测
        tile = this.getDownCollsiTile();
        if (tile.type) {
            switch (tile.type) {
                case TILE_TYPE.LAND:
                case TILE_TYPE.PIPE_H_ENTRY:
                case TILE_TYPE.WALL:
                case TILE_TYPE.PIPE_V_ENTRY:
                case TILE_TYPE.QUESTION:
                    this.node.y = this.orignPos.y;
                    this.vCurrAcceleration = 0;
                    this.vCurrSpeed = 0;
                    break;
            }
        } else {
            if (this.isOnLand) {
                this.isOnLand = false;
            }
        }
    }
});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=boss.js.map
        