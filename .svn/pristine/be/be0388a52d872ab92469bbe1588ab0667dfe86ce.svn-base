"use strict";
cc._RF.push(module, 'c55a50fa0JMjoTKVJ0tLFzJ', 'mushroom');
// script/monster/mushroom.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var Actor = require("actor");
var FSM = require("FSM");

var _require = require("mushroomState"),
    Walk = _require.Walk,
    Flat = _require.Flat,
    TopTurn = _require.TopTurn;

cc.Class({
    extends: Actor,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },

    },

    // LIFE-CYCLE CALLBACKS:
    init: function init() {
        this.animation = this.node.getComponent(cc.Animation);
        this.dir = DIR.DIR_LEFT;
        this.actorType = arguments[0]; //方向
        this.type = arguments[1];
        this.state = null;
        this.hDefSpe = 90;
        this.vDefSpe = -380;
        this.isOnLand = true;
        this.isDie = false;
        this.fsm = new FSM();
        this.fsm.addState(new Walk(this, "walk"));
        this.fsm.addState(new Flat(this, "flat"));
        this.fsm.addState(new TopTurn(this, "topturn"));
        this.fsm.setDefaultState("walk");
    },

    // onLoad () {},
    interactive: function interactive(actor) {
        if (this.isDie || actor.isDie || !this.isOnLand) return;

        var sizeOne = actor.getSize();
        var sizeTwo = this.getSize();
        if (this.actorCollsition(sizeOne, sizeTwo)) {
            //闪烁状态碰到怪物
            if (actor.isFlashing) {
                this.die();
            }
            //无敌状态碰到怪物
            else if (actor.isInvincible) {
                    //踩到蘑菇
                    if (sizeOne.y >= sizeTwo.y + sizeTwo.height / 2 && !actor.isUpOrDown()) {
                        actor.littleJump();
                        this.flat();
                    }
                }
                //普通状态碰到蘑菇
                else {
                        //踩到蘑菇
                        if (sizeOne.y >= sizeTwo.y + sizeTwo.height / 2) {
                            actor.littleJump();
                            this.flat();
                        } else if (actor.getFormState() !== FORM_STATE.SMALL) {
                            actor.fsm.switchStateWithStack("to_small");
                        } else {
                            actor.fsm.switchState("die");
                        }
                    }
        }
    },
    getSize: function getSize() {
        var size = this.node.getContentSize();
        var height = size.height - 4;
        var width = size.width - 4;
        return cc.rect(this.node.x, this.node.y, width, height);
    },
    update: function update(dt) {
        if (this.isPause) return;

        if (this.enableMove) {
            this.backPos();

            this.move(dt);

            if (this.isOutScreen()) {
                this.node.removeFromParent();
            }
        }

        if (this.enableCollsi) {
            var tile = null;
            //脚底的碰撞检测
            tile = this.getDownCollsiTile();
            if (tile.type) {
                switch (tile.type) {
                    case TILE_TYPE.LAND:
                    case TILE_TYPE.PIPE_H_ENTRY:
                    case TILE_TYPE.WALL:
                    case TILE_TYPE.PIPE_V_ENTRY:
                    case TILE_TYPE.QUESTION:
                        this.collsiDown(tile.tile);
                        break;
                }
            } else {
                if (this.isOnLand) {
                    this.isOnLand = false;
                    this.vCurrSpeed = this.vDefSpe;
                }
            }

            tile = this.getRightCollsiTile();
            if (tile.type) {
                switch (tile.type) {
                    case TILE_TYPE.LAND:
                    case TILE_TYPE.PIPE_H_ENTRY:
                    case TILE_TYPE.WALL:
                    case TILE_TYPE.PIPE_V_ENTRY:
                    case TILE_TYPE.QUESTION:
                        this.collsiRight(tile.tile);
                        break;
                }
            }

            tile = this.getLeftCollsiTile();
            if (tile.type) {
                switch (tile.type) {
                    case TILE_TYPE.LAND:
                    case TILE_TYPE.PIPE_H_ENTRY:
                    case TILE_TYPE.WALL:
                    case TILE_TYPE.PIPE_V_ENTRY:
                    case TILE_TYPE.QUESTION:
                        this.collsiLeft(tile.tile);
                        break;
                }
            }

            this.fsm.update(dt);
        }
    },
    collsiLeft: function collsiLeft(tile) {
        this.turnRight();
        this.node.x = this.getSize().width / 2 + tile.node.x + 40 + 1;
    },
    collsiRight: function collsiRight(tile) {
        this.turnLeft();
        this.node.x = tile.node.x - this.getSize().width / 2 - 1;
    },
    collsiDown: function collsiDown(tile) {
        if (this.isOnLand) return;
        var size = this.getSize();
        if (this.oldPos.y >= tile.node.y && (this.oldPos.x - size.width / 2 >= tile.node.x && this.oldPos.x - size.width / 2 <= tile.node.x + 40 || this.oldPos.x + size.width / 2 >= tile.node.x && this.oldPos.x + size.width / 2 <= tile.node.x + 40)) {
            this.isOnLand = true;
            this.node.y = tile.node.y + 40;
            this.vCurrSpeed = 0;
            this.vCurrAcceleration = 0;
        }
    },
    turnRight: function turnRight() {
        this.dir = DIR.DIR_RIGHT;
        this.hCurrSpeed = this.hDefSpe;
    },
    turnLeft: function turnLeft() {
        this.dir = DIR.DIR_LEFT;
        this.hCurrSpeed = -this.hDefSpe;
    },
    pause: function pause() {
        this.isPause = true;
        this.animation.pause();
    },
    resume: function resume() {
        this.isPause = false;
        this.animation.resume();
    },
    changeDir: function changeDir() {
        this.dir === DIR.DIR_LEFT ? this.turnRight() : this.turnLeft();
    },
    die: function die() {
        this.fsm.switchState("topturn");
        EM.emit(EM.type.SCORE_EFFECT, cc.v2(this.node.x, this.node.y + 80), 200);
    },
    flat: function flat() {
        this.fsm.switchState("flat");
        EM.emit(EM.type.SCORE_EFFECT, cc.v2(this.node.x, this.node.y + 80), 200);
    },

    //与怪物的碰撞检测
    collsiWithMon: function collsiWithMon(actor) {
        if (this.isDie) return;
        var sizeOne = actor.getSize();
        var sizeTwo = this.getSize();
        if (this.actorCollsition(sizeOne, sizeTwo)) {
            if (actor.getActorType() === ENUM.MON_TYPE.ROCKET) {
                return;
            }
            if (actor.getActorType() === ENUM.MON_TYPE.DUCK || actor.getActorType() === ENUM.MON_TYPE.HELMET) {
                return;
            } else {
                if (!actor.isDie) actor.changeDir();
                this.changeDir();
                this.node.x > actor.node.x ? this.node.x = sizeOne.x + sizeOne.width / 2 + sizeTwo.width / 2 + 1 : this.node.x = sizeOne.x - sizeOne.width / 2 - sizeTwo.width / 2 - 1;
            }
        }
    },
    onCollsiPushWall: function onCollsiPushWall(wallBox) {
        this.die();
    },
    onCollsiWithPBullet: function onCollsiWithPBullet(bullet) {
        bullet.die();
        this.die();
    }
});

cc._RF.pop();