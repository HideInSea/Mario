(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/script/prop/cirrus.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, 'a6695ohPbtOU4a8b8hgREUY', 'cirrus', __filename);
// script/prop/cirrus.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var Actor = require("actor");

var _require = require("aiCtrl"),
    MoveCmd = _require.MoveCmd;

cc.Class({
    extends: Actor,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
        head: cc.Prefab,
        body: cc.Prefab
    },

    // LIFE-CYCLE CALLBACKS:

    // onLoad () {},

    init: function init() {
        this.isStart = true;
        this.isEnd = false;
        this.isAiCtrl = false;

        this.actorType = arguments[0];

        var desObj = gm.posMgr.posLayer.getObject("cirrusEnd_" + arguments[1]);
        var mapPos = gm.posMgr.objectPosToMapPos(cc.v2(desObj.x, desObj.y));
        //let screenPos=gm.mapMgr.mapPosToScreenPos(mapPos);
        this.desPos = cc.v2(mapPos.x + 20, mapPos.y - 80);
        this.desMapPos = cc.v2(-mapPos.x + 40 * parseInt(arguments[2]) - 320, gm.node.y);

        this.length = 6;
        this.head = cc.instantiate(this.head);
        this.head.y = 0;
        this.node.addChild(this.head);
        this.bodys = [];
        this.bodys.push(this.head);
        for (var i = 0; i < this.length; i++) {
            var body = cc.instantiate(this.body);
            this.bodys.push(body);
            this.node.addChild(body);
        }

        var moveUp = cc.moveBy(4, cc.v2(0, this.length * 40));
        this.head.runAction(moveUp);
    },
    update: function update(dt) {
        for (var i = 1; i < this.bodys.length; i++) {
            if (this.bodys[i - 1].y > 38) this.bodys[i].y = this.bodys[i - 1].y - 39;else break;
        }

        if (this.isOutScreen()) {
            this.node.removeFromParent();
        }
    },
    reBorth: function reBorth() {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = this.bodys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var value = _step.value;

                value.y = 0;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var moveUp = cc.moveBy(3, cc.v2(0, this.length * 40));
        this.head.runAction(moveUp);
    },
    getSize: function getSize() {
        var x = this.node.x;
        var y = this.node.y;
        var width = 10;
        var height = this.head.y + 40;
        return cc.rect(x, y, width, height);
    },
    interactive: function interactive(actor) {
        if (actor.isDie) return;
        var sizeOne = actor.getSize();
        var sizeTwo = this.getSize();
        if (this.actorCollsition(sizeOne, sizeTwo)) {
            if (actor.isOnCirrus) {
                if (this.isStart) {
                    if (sizeOne.y > sizeTwo.y + this.length * 40 && this.isAiCtrl) {
                        gm.playerScript.aiCtrl.addCmd(new MoveCmd(gm.playerScript, cc.macro.KEY.w, "keyup"));
                        this.node.stopAllActions();
                        this.isStart = false;

                        var fadeOut = cc.fadeOut(0.05);
                        var fadeIn = cc.fadeIn(0.05);
                        var delay = cc.delayTime(0.2);
                        gm.node.runAction(cc.sequence(fadeOut, cc.callFunc(function () {
                            gm.posMgr.setMapToPos(this.desMapPos);
                            gm.playerScript.node.setPosition(this.desPos);
                            this.node.setPosition(this.desPos);
                        }, this), delay, fadeIn, cc.callFunc(function () {
                            this.reBorth();
                            setTimeout(function () {
                                gm.playerScript.aiCtrl.addCmd(new MoveCmd(gm.playerScript, cc.macro.KEY.w, "keydown"));
                            }, 2000);
                            this.isEnd = true;
                        }, this)));
                    } else if (sizeOne.y > sizeTwo.y + 4 * 40 && !this.isAiCtrl) {
                        this.isAiCtrl = true;
                        gm.playerScript.enableInput = false;
                        gm.playerScript.releaseAllKey();
                        gm.playerScript.aiCtrl.addCmd(new MoveCmd(gm.playerScript, cc.macro.KEY.w, "keydown"));
                    }
                } else if (this.isEnd) {
                    if (sizeOne.y > sizeTwo.y + 6 * 40 && this.isAiCtrl) {
                        this.isAiCtrl = false;
                        //gm.playerScript.releaseAllKey();
                        gm.playerScript.aiCtrl.addCmd(new MoveCmd(gm.playerScript, cc.macro.KEY.w, "keyup"));
                        gm.playerScript.enableInput = true;
                    } else if (sizeOne.y < sizeTwo.y + 4 * 40 && !this.isAiCtrl) {
                        actor.node.y = sizeTwo.y + 2 * 40;
                        actor.isTouchLand = true;
                    }
                }
            } else {
                actor.isOnCirrus = true;
                actor.isLeftOrRight() ? (actor.turnLeft(), actor.node.x = this.node.x + 10) : (actor.turnRight(), actor.node.x = this.node.x - 10);
                actor.fsm.switchState("climb");
            }
        }
    }
});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=cirrus.js.map
        