"use strict";
cc._RF.push(module, '7fd4a+CNDpM4aMw7aHCmoYT', 'spring');
// script/prop/spring.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var Actor = require("actor");
cc.Class({
    extends: Actor,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
    },

    // LIFE-CYCLE CALLBACKS:
    init: function init() {
        this.color = arguments[1];
        this.animation = this.node.getComponent(cc.Animation);
        this.isOnSpring = false;
    },
    spring: function spring() {},
    getSize: function getSize() {
        var size = this.node.getContentSize();
        return cc.rect(this.node.x, his.node.y, size.width, size.height);
    },
    interactive: function interactive(actor) {
        if (actor.isDie) return;
        var sizeOne = actor.getSize();
        var sizeTwo = this.getSize();
        if (this.actorCollsition(sizeOne, sizeTwo)) {
            //向下碰撞
            if (this.oldPos.y >= tile.node.y && (this.oldPos.x - size.width / 2 >= tile.node.x && this.oldPos.x - size.width / 2 <= tile.node.x + 40 || this.oldPos.x + size.width / 2 >= tile.node.x && this.oldPos.x + size.width / 2 <= tile.node.x + 40)) {
                if (this.playerState !== PLAYER_STATE.CLIMB) {
                    this.isOnLand = true;
                }
                this.isTouchLand = true;
                this.node.y = tile.node.y + 40;
                this.vCurrSpeed = 0;
                this.vCurrAcceleration = 0;
            }

            //向左

            //向右
        }
    },
    onCollsiWithPBullet: function onCollsiWithPBullet(bullet) {
        bullet.die();
    },

    // onLoad () {},    

    update: function update(dt) {
        if (this.isOutScreen()) {
            this.node.removeFromParent();
        }
    },
    playSpringAni: function playSpringAni() {
        switch (this.color) {
            case ENUM.PROP_COLOR.GRAY:
                this.animation.play("spring_gray");
                break;
            case ENUM.PROP_COLOR.RED:
                this.animation.play("spring_red");
                break;
        }
    }
});

cc._RF.pop();