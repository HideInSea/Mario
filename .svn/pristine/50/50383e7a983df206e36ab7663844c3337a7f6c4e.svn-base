(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/script/roundUi.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, '2efbeeqdchCuqC0j0pOgzQr', 'roundUi', __filename);
// script/roundUi.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html

cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
        score: cc.Label,
        coin: cc.Label,
        level: cc.Label,
        time: cc.Label,
        player_1: cc.SpriteFrame,
        player_2: cc.SpriteFrame,
        currPlayer: cc.Node,
        life: cc.Label
    },

    // LIFE-CYCLE CALLBACKS:

    // onLoad () {},
    onLoad: function onLoad() {

        this.updateLevel(global.getRoundString());
        this.updateTime(global.getTime());
        this.updateCoin(global.getCoin());
        this.updateScore(global.getScore());
        var sprite = this.currPlayer.getComponent(cc.Sprite);

        switch (global.getPlayerId()) {
            case 0:
                sprite.spriteFrame = this.player_1;break;
            case 1:
                sprite.spriteFrame = this.player_2;break;
        }

        this.life.string = global.getLife();
    },
    updateScore: function updateScore(score) {
        this.score.string = this.preFix(score, 6);
    },
    updateCoin: function updateCoin(coin) {
        this.coin.string = "x " + this.preFix(coin, 2);
    },
    updateLevel: function updateLevel(lv) {
        this.level.string = lv;
    },
    updateTime: function updateTime(time) {
        this.time.string = this.preFix(time, 3);
    },
    preFix: function preFix(num, len) {
        return (Array(len).join("0") + num).slice(-len);
    }
    // update (dt) {},

});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=roundUi.js.map
        