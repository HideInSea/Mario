"use strict";
cc._RF.push(module, 'a6695ohPbtOU4a8b8hgREUY', 'cirrus');
// script/prop/cirrus.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var Actor = require("actor");
cc.Class({
    extends: Actor,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
        head: cc.Prefab,
        body: cc.Prefab
    },

    // LIFE-CYCLE CALLBACKS:

    // onLoad () {},

    init: function init() {
        this.actorType = arguments[0];
        this.length = 6;
        this.head = cc.instantiate(this.head);
        this.head.y = 0;
        this.node.addChild(this.head);
        this.bodys = [];
        this.bodys.push(this.head);
        for (var i = 0; i < this.length; i++) {
            var body = cc.instantiate(this.body);
            this.bodys.push(body);
            this.node.addChild(body);
        }

        var moveUp = cc.moveBy(4, cc.v2(0, this.length * 40));
        this.head.runAction(moveUp);
    },
    update: function update(dt) {
        for (var i = 1; i < this.bodys.length; i++) {
            if (this.bodys[i - 1].y > 38) this.bodys[i].y = this.bodys[i - 1].y - 39;else break;
        }
    },
    reBorth: function reBorth() {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = this.bodys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var value = _step.value;

                value.y = 0;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var moveUp = cc.moveBy(3, cc.v2(0, this.length * 40));
        this.head.runAction(moveUp);
    },
    getSize: function getSize() {
        var x = this.node.x;
        var y = this.node.y;
        var width = 10;
        var height = this.head.y + 40;
        return cc.rect(x, y, width, height);
    },
    interactive: function interactive(actor) {
        if (actor.isDie) return;
        var sizeOne = actor.getSize();
        var sizeTwo = this.getSize();
        if (this.actorCollsition(sizeOne, sizeTwo)) {
            if (actor.isOnCirrus) {} else {
                actor.isOnCirrus = true;
                actor.isLeftOrRight() ? (actor.turnLeft(), actor.node.x = this.node.x + 10) : (actor.turnRight(), actor.node.x = this.node.x - 10);
                actor.fsm.switchState("climb");
            }
        }
    }
});

cc._RF.pop();