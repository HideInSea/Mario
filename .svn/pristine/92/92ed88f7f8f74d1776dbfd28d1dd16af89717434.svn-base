(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/script/monster/octopus.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, 'c44d4tFC5lIhL8trl1CXsXD', 'octopus', __filename);
// script/monster/octopus.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var Actor = require("actor");

var SWIM_DIR = {
    SWIM_DOWN: 0,
    SWIM_LEFT: 1,
    SWIM_RIGHT: 2,
    SWIM_UP: 3
};

cc.Class({
    extends: Actor,

    properties: {
        // foo: {
        //     // ATTRIBUTES:
        //     default: null,        // The default value will be used only when the component attaching
        //                           // to a node for the first time
        //     type: cc.SpriteFrame, // optional, default is typeof default
        //     serializable: true,   // optional, default is true
        // },
        // bar: {
        //     get () {
        //         return this._bar;
        //     },
        //     set (value) {
        //         this._bar = value;
        //     }
        // },
    },

    // LIFE-CYCLE CALLBACKS:

    // onLoad () {},
    init: function init() {
        this.isAllowSwim = true;
        this.animation = this.node.getComponent(cc.Animation);
        this.isDie = false;
    },
    swimLeft: function swimLeft() {
        var _this = this;

        var moveLeft = cc.moveBy(0.3, cc.v2(-80, 80));
        var moveDown = cc.moveBy(1, cc.v2(0, -80));
        this.node.runAction(cc.sequence(moveLeft, cc.callFunc(function () {
            this.playSwimAni();
        }, this), moveDown, cc.callFunc(function () {
            _this.isAllowSwim = true;
        })));
    },
    swimRight: function swimRight() {
        var _this2 = this;

        var moveRight = cc.moveBy(0.3, cc.v2(80, 80));
        var moveDown = cc.moveBy(1, cc.v2(0, -80));
        this.node.runAction(cc.sequence(moveRight, cc.callFunc(function () {
            this.playSwimAni();
        }, this), moveDown, cc.callFunc(function () {
            _this2.isAllowSwim = true;
        })));
    },
    swimDown: function swimDown() {
        var _this3 = this;

        var moveDown = cc.moveBy(1, cc.v2(0, -80));
        this.playFloatAni();
        this.node.runAction(cc.sequence(moveDown, cc.callFunc(function () {
            _this3.isAllowSwim = true;
        })));
    },
    swimUp: function swimUp() {
        var _this4 = this;

        var moveUp = cc.moveBy(1, cc.v2(0, 80));
        this.playFloatAni();
        this.node.runAction(cc.sequence(moveUp, cc.callFunc(function () {
            _this4.isAllowSwim = true;
        })));
    },
    getSwimDir: function getSwimDir() {
        var dir = 0;
        //如果章鱼离人很远朝着人的方向移动
        if (this.node.x > gm.currPlayer.x + 80) {
            dir = SWIM_DIR.SWIM_LEFT;
        } else if (this.node.x < gm.currPlayer.x - 80) {
            dir = SWIM_DIR.SWIM_RIGHT;
        } else if (this.node.y > 40 * 8) {
            //碰到水面
            dir = Math.floor(Math.random() * 3);
        } else if (this.node.y < 40 * 4) {
            dir = Math.floor(Math.random() * 3) + 1;
        } else {
            dir = Math.floor(Math.random() * 4);
        }
        return dir;
    },
    getSize: function getSize() {
        var size = this.node.getContentSize();
        return cc.rect(this.node.x, this.node.y, size.width, size.height);
    },
    update: function update(dt) {
        if (this.isPause) return;

        this.move(dt);

        if (this.isAllowSwim && !this.isDie) {
            var dir = this.getSwimDir();
            switch (dir) {
                case SWIM_DIR.SWIM_DOWN:
                    this.swimDown();
                    break;
                case SWIM_DIR.SWIM_UP:
                    this.swimUp();
                    break;
                case SWIM_DIR.SWIM_LEFT:
                    this.swimLeft();
                    break;
                case SWIM_DIR.SWIM_RIGHT:
                    this.swimRight();
                    break;
            }
            this.isAllowSwim = false;
        }

        if (this.isOutScreen()) {
            this.node.removeFromParent();
        }
    },
    playSwimAni: function playSwimAni() {
        this.animation.play("swim");
    },
    playFloatAni: function playFloatAni() {
        this.animation.play("float");
    },
    die: function die() {
        this.animation.stop();
        this.isDie = true;
        this.node.scaleY = -1;
        this.node.y += 40;
        this.vCurrSpeed = 300;
        this.vCurrAcceleration = -1400;
        this.hCurrSpeed = 0;
        this.hCurrAcceleration = 0;
    },
    pause: function pause() {
        this.node.pauseAllActions();
        this.animation.pause();
        this.isPuase = true;
    },
    resume: function resume() {
        this.node.resumeAllActions();
        this.animation.resume();
        this.isPuase = false;
    },
    interactive: function interactive(actor) {
        if (this.isDie || actor.isDie) return;
        var sizeOne = actor.getSize();
        var sizeTwo = this.getSize();
        if (this.actorCollsition(sizeOne, sizeTwo)) {
            //闪烁状态碰到怪物
            if (actor.isFlashing) {
                this.die();
            } //无敌状态碰到怪物
            else if (actor.isInvincible) {}
                //普通状态碰到蘑菇
                else {
                        if (actor.getFormState() !== FORM_STATE.SMALL) {
                            actor.fsm.switchStateWithStack("to_small");
                        } else {
                            actor.fsm.switchState("die");
                        }
                    }
        }
    },
    onCollsiWithPBullet: function onCollsiWithPBullet(bullet) {
        bullet.die();
        this.die();
    }
});

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=octopus.js.map
        